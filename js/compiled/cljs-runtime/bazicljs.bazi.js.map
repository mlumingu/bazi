{"version":3,"sources":["bazicljs/bazi.cljs"],"mappings":"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","names":["bazicljs.bazi/get-palace","pillars","palace","p1__100261#","cljs.core/some","cljs.core._EQ_","bazicljs.bazi/cart","colls","cljs.core/empty?","iter__4529__auto__","s__100263","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__100265","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__100267","cljs.core/chunk-buffer","i__100266","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__100264","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__100262","more","G__100268","x","cljs.core.conj","bazicljs.bazi/remove-one","elem","coll","vec__100269","cljs.core.nth","m","n","cljs.core/split-with","cljs.core.partial","cljs.core/not=","bazicljs.bazi/relation-instances","relation","rel","pillar","cljs.core/List","cljs.core.map","instance","bazicljs.bazi/relation","idtype","id","rids","id-in-r","other-rids","matches","p1__100272#","cljs.core.filter","groups","cljs.core/group-by","full-relation?","bazicljs.bazi/separate-all","pos","vec__100276","a","b","cljs.core/split-at","separate-at","cljs.core.range","bazicljs.bazi/relations2","rels","cljs.core.mapcat","bazicljs.bazi/relations","relations","s__100280","b__100282","i__100281","vec__100283","iter__100279","vec__100286","p","ps","bazicljs.bazi/jiazis","stems","branches","cljs.core/vector","p__100289","p__100290","map__100291","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__100292","bazicljs.bazi/stems-qi","t-bid","time-pillar","sid","bid","and__4115__auto__","bsid","bazicljs.bazi-util/STEM-FROM-BRANCH","hsids","bazicljs.bazi-util/HIDDEN-STEMS","s-qi","bazicljs.bazi-util/stem-qi","b-qi","j-qi","bazicljs.bazi-util/jiazi-qi","hss-qi","cljs.core/PersistentVector","bazicljs.bazi/pillars-stems-qi","stages","r-stages","p1__100295#","bazicljs.bazi/stem-score","total","G__100296","js/Error","p__100297","map__100298","bazicljs.bazi/pillar-stem-scores","num-hstems","sids","triples","cljs.core/list","cljs.core.repeat","triples2","cljs.core/apply","p__100300","vec__100301","bazicljs.bazi/update-scores","scores","i","score","cur-score","new-score","cljs.core.assoc","bazicljs.bazi/stem-scores","cljs.core.reduce","cljs.core.into","cljs.core.take","bazicljs.bazi/god-scores","dm","mbid","s-scores","multipliers","bazicljs.bazi-util/score-multipliers","stem-gods","bazicljs.bazi-util/stem-gods","empty-god-scores","m-s-scores","cljs.core/*","bazicljs.bazi/element-scores","god-scores","cljs.core.mapv","cljs.core/+","cljs.core.take_nth","bazicljs.bazi/strong-weak-scores","elem-scores","o","w","r","bazicljs.bazi/pillars-to-map","cljs.core/sorted-map","p1__100304#","bazicljs.bazi/natal-pillars","date","no-hour","solar","bazicljs.calendar/gregorian-to-solar-ymd","bazicljs.calendar/gregorian-to-solar","slugs","bazicljs.calendar/natal-slugs","jiazis","bazicljs.bazi-util/jiazi-id","palaces","bazicljs.bazi-util/palace-keys","cljs.core/second","voids","bazicljs.bazi-util/is-void?","n-pillars","bazicljs.bazi-util/natal-relations","qi-stages","cljs.core/merge","bazicljs.bazi/day-pillar","p1__100305#","bazicljs.bazi/luck-pillars","is-male","cljs-time.core/at-midnight","fexpr__100310","start-ages","bazicljs.calendar/luck-pillar-start-ages","add-empty","cljs.core.not_EQ_","bazicljs.calendar/luck-pillars","start-dates","p1__100306#","cljs_time.core.plus","cljs_time.core.years","end-dates","p1__100307#","start-years","p1__100308#","cljs-time.core/year","cljs.core/str","p1__100309#","cljs-time.format/unparse","cljs_time.format.formatter","l-pillars","bazicljs.bazi-util/relations","bazicljs.bazi/year-pillars","l-pillar","l-start","l-end","fexpr__100313","years","bazicljs.calendar/year-pillars","p1__100311#","nl-pillars","p1__100312#","y-pillars","bazicljs.bazi/month-pillars","y-pillar","y-start","y-end","fexpr__100318","months","bazicljs.calendar/month-pillars","p1__100314#","p1__100315#","p1__100316#","end-slugs","p1__100317#","m-pillars","bazicljs.bazi/day-pillars","m-pillar","m-start","m-end","fexpr__100321","days","bazicljs.calendar/day-pillars","p1__100319#","p1__100320#","bazicljs.bazi/hour-pillars","d-pillar","d-start","fexpr__100323","hours","bazicljs.calendar/hour-pillars","p1__100322#","bazicljs.bazi/chart","natal","luck","g-scores","e-scores","sw-scores","cljs.core/chunk-first"],"sourcesContent":["(ns bazicljs.bazi\n  (:require\n   [bazicljs.calendar :as bc]\n   [bazicljs.bazi-util :as bu]\n   [cljs-time.core :as time]\n   [cljs-time.format :as ftime]\n   ))\n\n(defn get-palace [pillars palace]\n  (some #(if (= (:palace %) palace) %) pillars))\n\n\n(defn cart [colls]\n  (if (empty? colls)\n    '(#{})\n    (for [more (cart (rest colls))\n          x (first colls)]\n      (conj more x))))\n\n(defn remove-one [elem coll]\n  (let [[m n] (split-with (partial not= elem) coll)]\n    (concat m (rest n))))\n\n\n(defn relation-instances [relation pillars]\n  (letfn [(instance [rel pillar]\n            {:type (:type rel) :palaces (list (:palace pillar)) :element (:element rel)}\n            )]\n    (if (:pairs? relation)\n      (map (partial instance relation) pillars)\n      (list {:type (:type relation) :palaces (map :palace pillars) :element (:element relation)}))))\n\n\n(defn relation [pillar pillars relation]\n  (let [idtype (:idtype relation)\n        id     (idtype pillar)\n        rids   (:ids relation)\n        id-in-r (some #{id} rids)]\n    (if id-in-r\n      (let [other-rids (remove-one id rids)\n            matches (filter #(some #{(idtype %)} other-rids)  pillars)\n            groups (group-by idtype matches)\n            full-relation? (= (count other-rids) (count groups))]\n        (if full-relation?\n          (relation-instances relation matches))\n        )\n      ()\n      )))\n\n\n(defn separate-all [coll]\n  (letfn [(separate-at [coll pos]\n            (let [[a b] (split-at pos coll)]\n              [(first b) (concat a (rest b))]))]\n    (map (partial separate-at coll) (range (count coll)))))\n\n\n(defn relations2 [rels pillars pillar]\n  (mapcat (partial relation pillar pillars) rels))\n\n\n(defn relations [relations pillars]\n  (for [[p ps] (separate-all pillars)]\n    (mapcat (partial relation p ps) relations)))\n\n\n(defn jiazis [stems branches]\n  (map vector\n       stems\n       branches))\n\n\n(defn stems-qi [{t-bid :branch :as time-pillar} {sid :stem bid :branch :as pillar}]\n  (if (and t-bid sid bid)\n    (let [bsid   (bu/STEM-FROM-BRANCH bid)\n          hsids  (bu/HIDDEN-STEMS bid)\n          s-qi   (bu/stem-qi t-bid sid)\n          b-qi   (bu/stem-qi t-bid bsid)\n          j-qi   (bu/jiazi-qi t-bid [sid bid])\n          hss-qi (map (partial bu/stem-qi t-bid) hsids)]\n      (vector s-qi b-qi j-qi hss-qi))\n    nil))\n\n\n(defn pillars-stems-qi [pillars time-pillar]\n  (let [stages    (map (partial stems-qi time-pillar) pillars)\n        r-stages  (map #(stems-qi % time-pillar) pillars)]\n    {:qi-stages stages :r-qi-stages r-stages}))\n\n\n(defn stem-score [id pos total]\n  (if (= pos 0)\n    [id 100]\n    (case [pos total]\n      [1 1] [id 100]\n      \n      [1 2] [id 80]\n      [2 2] [id 20]\n      \n      [1 3] [id 60]\n      [2 3] [id 20]\n      [3 3] [id 20])))\n\n\n(defn pillar-stem-scores [{sid :stem bid :branch palace :palace}]\n  (let [hsids      (bu/HIDDEN-STEMS bid)\n        num-hstems (count hsids)\n        sids       (cons sid hsids)\n        triples    (map list sids (range) (repeat num-hstems))\n        triples2   (if (= palace :D) (rest triples) triples)]\n    (map (partial apply stem-score) triples2)))\n\n\n(defn update-scores [scores [i score]]\n  (let [cur-score (nth scores i)\n        new-score (+ cur-score score)]\n    (assoc scores i new-score)))\n\n\n(defn stem-scores [pillars]\n  (->> pillars\n       (mapcat pillar-stem-scores)\n       (reduce update-scores (into [] (take 10 (repeat 0))))\n       ))\n\n\n(defn god-scores [pillars]\n  (let [dm          (:stem (get-palace pillars :D))\n        mbid        (:branch (get-palace pillars :M))\n        s-scores    (stem-scores pillars)\n        multipliers (bu/score-multipliers mbid)\n        stem-gods   (bu/stem-gods dm)\n        empty-god-scores (into [] (take 10 (repeat 0)))\n        m-s-scores (map * s-scores multipliers)]\n    (->> m-s-scores\n         (map vector (bu/stem-gods dm))\n         (reduce update-scores empty-god-scores)\n                                        ;(mapv * bu/dm-score-correction-multipliers)\n         )\n    ))\n\n\n(defn element-scores [god-scores]\n  (mapv +\n        (take-nth 2 god-scores)\n        (take-nth 2 (rest god-scores))))\n\n\n(defn strong-weak-scores [elem-scores]\n  (let [p (elem-scores 0)\n        o (elem-scores 1)\n        w (elem-scores 2)\n        i (elem-scores 3)\n        r (elem-scores 4)]\n    [(+ p r) (* 0.7 (+ o w i))]\n    ))\n\n\n(defn pillars-to-map [pillars]\n  (into (sorted-map) (map #(vector (% :id) %) pillars)))\n\n\n(defn natal-pillars [date no-hour]\n  (let [solar     (if no-hour (bc/gregorian-to-solar-ymd date) (bc/gregorian-to-solar date))\n        stems     (take-nth 2 solar)\n        branches  (take-nth 2 (rest solar))\n        slugs     (bc/natal-slugs date)\n        slugs     (if no-hour (rest slugs) slugs)\n        jiazis    (jiazis stems branches)\n        jiazis    (map bu/jiazi-id jiazis)\n        palaces   (take 4 bu/palace-keys)\n        palaces   (if no-hour (rest palaces) palaces)\n        dm        (if no-hour (first jiazis) (second jiazis))\n        voids     (map (partial bu/is-void? dm) branches)\n        \n        n-pillars (map hash-map\n                       (repeat :id)     palaces\n                       (repeat :stem)   stems\n                       (repeat :branch) branches\n                       (repeat :jiazi)  jiazis\n                       (repeat :slug)   slugs\n                       (repeat :palace) palaces\n                       (repeat :void)   voids\n                       )\n        \n        relations (relations bu/natal-relations n-pillars)\n        relations (map hash-map (repeat :relations) relations)        \n        qi-stages (map (partial pillars-stems-qi n-pillars) n-pillars)]\n    \n    (mapv merge n-pillars relations qi-stages)))\n\n\n(defn day-pillar [n-pillars]\n  (first (filter #(= (% :palace) :D) n-pillars)))\n\n\n(defn luck-pillars [date is-male n-pillars]\n  (let [date         (time/at-midnight date)\n        dm           ((day-pillar n-pillars) :jiazi)\n        start-ages   (take 10 (bc/luck-pillar-start-ages date is-male))\n        add-empty    (not= 0 (first start-ages))\n        \n        pillars      (take 10 (bc/luck-pillars date is-male))\n\n        stems        (map first pillars)\n        stems        (if add-empty (cons nil stems) stems)\n        branches     (map second pillars)\n        branches     (if add-empty (cons nil branches) branches)\n        jiazis       (jiazis stems branches)\n        jiazis       (map bu/jiazi-id jiazis)        \n        jiazis       (if add-empty (cons nil jiazis) jiazis)\n\n        voids        (map (partial bu/is-void? dm) branches)\n\n        start-dates  (map #(time/plus date (time/years %)) start-ages)\n        end-dates    (mapv #(time/plus % (time/years 10)) start-dates)\n\n        end-dates    (if add-empty (cons (first start-dates) end-dates) end-dates)\n        start-dates  (if add-empty (cons date start-dates) start-dates)\n        \n        start-years  (map #(time/year %) start-dates)\n\n        slugs        (map str start-ages (repeat \" - \") start-years)\n        slugs        (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd\") %) start-dates)\n\n\n        \n        l-pillars    (map hash-map\n                          (repeat :id)   start-ages\n                          (repeat :stem) stems\n                          (repeat :branch) branches\n                          (repeat :jiazi) jiazis\n                          (repeat :slug) slugs\n                          (repeat :palace) (repeat :l)\n                          (repeat :start-age) start-ages\n                          (repeat :start-date) start-dates\n                          (repeat :end-date) end-dates\n                          (repeat :void) voids\n                          )\n        \n        relations    (map (partial relations2 bu/relations n-pillars) l-pillars)\n        relations    (map hash-map (repeat :relations) relations)        \n        qi-stages    (map (partial pillars-stems-qi n-pillars) l-pillars)\n\n        l-pillars    (map merge l-pillars relations qi-stages)]\n    \n    (pillars-to-map l-pillars)\n    ))\n\n\n(defn year-pillars [n-pillars l-pillar]\n  (let [l-start     (l-pillar :start-date)\n        l-end       (l-pillar :end-date)\n        dm           ((day-pillar n-pillars) :jiazi)        \n        years       (bc/year-pillars l-start l-end)\n        start-dates (map first years)\n        end-dates   (map second years)\n        pillars     (map #(nth % 2) years)\n        stems       (map first pillars)\n        branches    (map second pillars)\n        jiazis      (map bu/jiazi-id pillars)        \n        slugs       (map time/year start-dates)\n        nl-pillars  (conj n-pillars l-pillar)\n        slugs        (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd\") %) start-dates)\n        voids        (map (partial bu/is-void? dm) branches)\n        \n        y-pillars   (map hash-map\n                         (repeat :id)  slugs\n                         (repeat :stem) stems\n                         (repeat :branch) branches\n                         (repeat :jiazi) jiazis\n                         (repeat :slug) slugs\n                         (repeat :palace) (repeat :y)\n                         (repeat :start-date) start-dates\n                         (repeat :end-date) end-dates\n                         (repeat :void) voids\n                         )\n        \n        relations  (map (partial relations2 bu/relations nl-pillars) y-pillars)\n        relations  (map hash-map (repeat :relations) relations)        \n        qi-stages  (map (partial pillars-stems-qi nl-pillars) y-pillars)\n\n        y-pillars  (map merge y-pillars relations qi-stages)]\n    \n    (pillars-to-map y-pillars)\n    ))\n\n\n(defn month-pillars [nl-pillars y-pillar]\n  (let [y-start     (y-pillar :start-date)\n        y-end       (y-pillar :end-date)\n        dm           ((day-pillar nl-pillars) :jiazi)                \n        months      (bc/month-pillars y-start y-end)\n        start-dates (map first months)\n        end-dates   (map second months)\n        pillars     (map #(nth % 2) months)\n        stems       (map first pillars)\n        branches    (map second pillars)\n        jiazis      (map bu/jiazi-id pillars)        \n        slugs       (map #(ftime/unparse (ftime/formatter \"yyyy-MM\") %) start-dates)\n        slugs       (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd\") %) start-dates)\n        voids        (map (partial bu/is-void? dm) branches)        \n\n        end-slugs   (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd\") %) end-dates)\n\n        \n        m-pillars   (map hash-map\n                         (repeat :id)  slugs\n                         (repeat :stem) stems\n                         (repeat :branch) branches\n                         (repeat :jiazi) jiazis\n                         (repeat :slug) slugs\n                         (repeat :palace) (repeat :m)\n                         (repeat :start-date) start-dates\n                         (repeat :end-date) end-dates\n                         (repeat :end-slug) end-slugs\n                         (repeat :void) voids\n                         )\n        \n        relations  (map (partial relations2 bu/relations nl-pillars) m-pillars)\n        relations  (map hash-map (repeat :relations) relations)        \n        qi-stages  (map (partial pillars-stems-qi nl-pillars) m-pillars)\n        \n        m-pillars  (map merge m-pillars relations qi-stages)]\n    \n    (pillars-to-map m-pillars)\n    ))\n\n(defn day-pillars [nl-pillars m-pillar]\n  (let [m-start     (m-pillar :start-date)\n        m-end       (m-pillar :end-date)\n        dm           ((day-pillar nl-pillars) :jiazi)                        \n        days        (bc/day-pillars m-start m-end)\n        start-dates (map first days)\n        ;;TODO plus 1 day\n        end-dates   (map first days)\n        pillars     (map #(nth % 2) days)\n        jiazis      (map bu/jiazi-id pillars)        \n        stems       (map first pillars)\n        branches    (map second pillars)\n        slugs       (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd\") %) start-dates)\n        voids        (map (partial bu/is-void? dm) branches)        \n        \n        pillars     (map hash-map\n                         (repeat :id)  slugs\n                         (repeat :stem) stems\n                         (repeat :branch) branches\n                         (repeat :jiazi) jiazis\n                         (repeat :slug) slugs\n                         (repeat :palace) (repeat :d)\n                         (repeat :start-date) start-dates\n                         (repeat :end-date) end-dates\n                         (repeat :void) voids                       \n                         )\n        \n        relations  (map (partial relations2 bu/relations nl-pillars) pillars)\n        relations  (map hash-map (repeat :relations) relations)        \n        qi-stages  (map (partial pillars-stems-qi nl-pillars) pillars)\n        \n        pillars  (map merge pillars relations qi-stages)]\n    \n    (pillars-to-map pillars)\n    ))\n\n\n(defn hour-pillars [nl-pillars d-pillar]\n  (let [d-start     (d-pillar :start-date)\n        dm          ((day-pillar nl-pillars) :jiazi)                        \n        hours       (bc/hour-pillars d-start)\n        start-dates (map first hours)\n        end-dates   start-dates\n        pillars     (map second hours)\n        jiazis      (map bu/jiazi-id pillars)        \n        stems       (map first pillars)\n        branches    (map second pillars)\n        slugs       (map #(ftime/unparse (ftime/formatter \"yyyy-MM-dd HH:mm\") %) start-dates)\n        voids        (map (partial bu/is-void? dm) branches)        \n        \n        pillars     (map hash-map\n                         (repeat :id)  slugs\n                         (repeat :stem) stems\n                         (repeat :branch) branches\n                         (repeat :jiazi) jiazis\n                         (repeat :slug) slugs\n                         (repeat :palace) (repeat :h)\n                         (repeat :start-date) start-dates\n                         (repeat :end-date) end-dates\n                         (repeat :void) voids\n                         )\n        \n        relations  (map (partial relations2 bu/relations nl-pillars) pillars)\n        relations  (map hash-map (repeat :relations) relations)        \n        qi-stages  (map (partial pillars-stems-qi nl-pillars) pillars)\n        \n        pillars  (map merge pillars relations qi-stages)]\n    \n    (pillars-to-map pillars)\n    ))\n\n\n(defn chart [date is-male no-hour]\n  (let [natal      (natal-pillars date no-hour)\n        luck       (luck-pillars date is-male natal)\n        g-scores   (god-scores natal)\n        e-scores   (element-scores g-scores)\n        sw-scores  (strong-weak-scores e-scores)]\n    {:natal-pillars natal\n     :l luck\n     :y nil\n     :m nil\n     :d nil\n     :h nil\n     :god-scores    g-scores\n     :elem-scores   e-scores\n     :strong-weak-scores sw-scores}))\n\n\n;;(def dd (time/date-time 1990 9 6 23 10))\n;;(def nps (natal-pillars dd true))\n;;(def lps (luck-pillars dd true nps))\n;;nps\n;;lps\n;;(lps 0)\n;;((lps 0) :start-date)\n;;((lps 0) :end-date)\n\n\n;;l0\n;;(l0 :id)\n\n;;(l0 :start-date)\n;;(l0 :end-date)\n;;;(bc/year-pillars1 (l0 :start-date) (l0 :end-date))\n\n;;(stem-scores nps)\n;;(god-scores nps)\n;;(strong-weak-scores (element-scores (god-scores nps)))\n\n\n"]}