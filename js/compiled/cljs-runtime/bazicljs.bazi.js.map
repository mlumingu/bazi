{"version":3,"sources":["bazicljs/bazi.cljs"],"mappings":"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","names":["bazicljs.bazi/cart","colls","cljs.core/empty?","iter__4529__auto__","s__30295","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__30297","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__30299","cljs.core/chunk-buffer","i__30298","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30296","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat","iter__30294","more","G__30302","x","cljs.core.conj","bazicljs.bazi/remove-one","elem","coll","vec__30307","cljs.core.nth","m","n","cljs.core/split-with","cljs.core.partial","cljs.core/not=","bazicljs.bazi/relation-instances","relation","pillars","rel","pillar","cljs.core/List","cljs.core.map","instance","bazicljs.bazi/relation","idtype","id","rids","id-in-r","cljs.core/some","other-rids","matches","p1__30312#","cljs.core.filter","groups","cljs.core/group-by","full-relation?","cljs.core._EQ_","bazicljs.bazi/separate-all","pos","vec__30321","a","b","cljs.core/split-at","separate-at","cljs.core.range","bazicljs.bazi/relations2","rels","cljs.core.mapcat","bazicljs.bazi/relations","relations","s__30331","b__30336","i__30334","vec__30339","iter__30329","vec__30344","p","ps","bazicljs.bazi/jiazis","stems","branches","cljs.core/vector","bazicljs.bazi/stems-qi","time-pillar","t-bid","sid","bid","bsid","bazicljs.bazi-util/STEM-FROM-BRANCH","hsids","bazicljs.bazi-util/HIDDEN-STEMS","s-qi","bazicljs.bazi-util/stem-qi","b-qi","j-qi","bazicljs.bazi-util/jiazi-qi","hss-qi","cljs.core/PersistentVector","bazicljs.bazi/pillars-stems-qi","stages","r-stages","p1__30354#","bazicljs.bazi/stem-score","total","G__30358","js/Error","p__30366","map__30368","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","bazicljs.bazi/pillar-stem-scores","palace","num-hstems","sids","triples","cljs.core/list","cljs.core.repeat","triples2","cljs.core/apply","p__30376","vec__30380","bazicljs.bazi/update-scores","scores","i","score","cur-score","new-score","cljs.core.assoc","bazicljs.bazi/stem-scores","cljs.core.reduce","cljs.core.into","cljs.core.take","bazicljs.bazi/god-scores","dm","mbid","s-scores","multipliers","bazicljs.bazi-util/score-multipliers","stem-gods","bazicljs.bazi-util/stem-gods","empty-god-scores","m-s-scores","cljs.core/*","cljs.core.mapv","bazicljs.bazi-util/dm-score-correction-multipliers","bazicljs.bazi/element-scores","god-scores","cljs.core/+","cljs.core.take_nth","bazicljs.bazi/strong-weak-scores","elem-scores","o","w","r","bazicljs.bazi/natal-pillars","date","solar","bazicljs.calendar/gregorian-to-solar","slugs","bazicljs.calendar/natal-slugs","jiazis","palaces","bazicljs.bazi-util/palace-keys","bazicljs.bazi-util/natal-relations","qi","extras","cljs.core/merge","bazicljs.bazi/luck-pillars","is-male","natals","bazicljs.calendar/luck-pillars","cljs.core/second","start-ages","bazicljs.calendar/luck-pillar-start-ages","start-dates","p1__30403#","cljs_time.core.plus","cljs_time.core.years","start-years","p1__30405#","cljs-time.core/year","cljs.core/str","lucks","bazicljs.bazi-util/relations","bazicljs.bazi/year-pillars","year","bazicljs.calendar/year-pillars","yps","bazicljs.bazi/chart","natal","luck","g-scores","e-scores","sw-scores","cljs.core/chunk-first"],"sourcesContent":["(ns bazicljs.bazi\n  (:require\n   [bazicljs.calendar :as bc]\n   [bazicljs.bazi-util :as bu]\n   [cljs-time.core :as time]      \n   ))\n\n\n(defn cart [colls]\n  (if (empty? colls)\n    '(#{})\n    (for [more (cart (rest colls))\n          x (first colls)]\n      (conj more x))))\n\n(defn remove-one [elem coll]\n  (let [[m n] (split-with (partial not= elem) coll)]\n    (concat m (rest n))))\n\n\n(defn relation-instances [relation pillars]\n  (letfn [(instance [rel pillar]\n            {:type (:type rel) :palaces (list (:palace pillar))}\n            )]\n    (if (:pairs? relation)\n      (map (partial instance relation) pillars)\n      (list {:type (:type relation) :palaces (map :palace pillars)}))))\n\n\n(defn relation [pillar pillars relation]\n  (let [idtype (:idtype relation)\n        id     (idtype pillar)\n        rids   (:ids relation)\n        id-in-r (some #{id} rids)]\n    (if id-in-r\n      (let [other-rids (remove-one id rids)\n            matches (filter #(some #{(idtype %)} other-rids)  pillars)\n            groups (group-by idtype matches)\n            full-relation? (= (count other-rids) (count groups))]\n        (if full-relation?\n          (relation-instances relation matches))\n        )\n      ()\n      )))\n\n\n(defn separate-all [coll]\n  (letfn [(separate-at [coll pos]\n            (let [[a b] (split-at pos coll)]\n              [(first b) (concat a (rest b))]))]\n    (map (partial separate-at coll) (range (count coll)))))\n\n\n(defn relations2 [rels pillars pillar]\n  (mapcat (partial relation pillar pillars) rels))\n\n\n(defn relations [relations pillars]\n  (for [[p ps] (separate-all pillars)]\n    (mapcat (partial relation p ps) relations)))\n\n\n(defn jiazis [stems branches]\n  (map vector\n       stems\n       branches))\n\n\n(defn stems-qi [time-pillar pillar]\n  (let [t-bid  (:branch time-pillar)\n        sid    (:stem pillar)\n        bid    (:branch pillar)\n        bsid   (bu/STEM-FROM-BRANCH bid)\n        hsids  (bu/HIDDEN-STEMS bid)\n        s-qi   (bu/stem-qi t-bid sid)\n        b-qi   (bu/stem-qi t-bid bsid)\n        j-qi   (bu/jiazi-qi t-bid [sid bid])\n        hss-qi (map (partial bu/stem-qi t-bid) hsids)]\n    (vector s-qi b-qi j-qi hss-qi)))\n\n\n(defn pillars-stems-qi [pillars time-pillar]\n  (let [stages    (map (partial stems-qi time-pillar) pillars)\n        r-stages  (map #(stems-qi % time-pillar) pillars)]\n    {:qi-stages stages :r-qi-stages r-stages}))\n\n\n(defn stem-score [id pos total]\n  (if (= pos 0)\n    [id 100]\n    (case [pos total]\n      [1 1] [id 100]\n      \n      [1 2] [id 80]\n      [2 2] [id 20]\n      \n      [1 3] [id 60]\n      [2 3] [id 20]\n      [3 3] [id 20])))\n\n\n(defn pillar-stem-scores [{sid :stem bid :branch palace :palace}]\n  (let [hsids      (bu/HIDDEN-STEMS bid)\n        num-hstems (count hsids)\n        sids       (cons sid hsids)\n        triples    (map list sids (range) (repeat num-hstems))\n        triples2   (if (= palace :D) (rest triples) triples)]\n    (map (partial apply stem-score) triples2)))\n\n\n(defn update-scores [scores [i score]]\n  (let [cur-score (nth scores i)\n        new-score (+ cur-score score)]\n    (assoc scores i new-score)))\n\n\n(defn stem-scores [pillars]\n  (->> pillars\n       (mapcat pillar-stem-scores)\n       (reduce update-scores (into [] (take 10 (repeat 0))))\n       ))\n\n\n(defn god-scores [pillars]\n  (let [dm          (:stem (nth pillars 1))\n        mbid        (:branch (nth pillars 2))\n        s-scores    (stem-scores pillars)\n        multipliers (bu/score-multipliers mbid)\n        stem-gods   (bu/stem-gods dm)\n        empty-god-scores (into [] (take 10 (repeat 0)))\n        m-s-scores (map * s-scores multipliers)]\n    (->> m-s-scores\n         (map vector (bu/stem-gods dm))\n         (reduce update-scores empty-god-scores)\n         (mapv * bu/dm-score-correction-multipliers))\n    ))\n\n\n(defn element-scores [god-scores]\n  (mapv +\n        (take-nth 2 god-scores)\n        (take-nth 2 (rest god-scores))))\n\n\n(defn strong-weak-scores [elem-scores]\n  (let [p (elem-scores 0)\n        o (elem-scores 1)\n        w (elem-scores 2)\n        i (elem-scores 3)\n        r (elem-scores 4)]\n    [(+ p r) (+ o w i)]\n    ))\n\n\n(defn natal-pillars [date]\n  (let [solar    (bc/gregorian-to-solar date)\n        stems    (take-nth 2 solar)\n        branches (take-nth 2 (rest solar))\n        slugs    (bc/natal-slugs date)\n        jiazis   (jiazis stems branches)\n        palaces  (take 4 bu/palace-keys)\n        pillars  (map hash-map\n                      (repeat :stem) stems\n                      (repeat :branch) branches\n                      (repeat :jiazi) jiazis\n                      (repeat :slug) slugs\n                      (repeat :palace) palaces)\n        rels     (relations bu/natal-relations pillars)\n        qi       (map (partial pillars-stems-qi pillars) pillars) \n        extras   (map hash-map (repeat :relations) rels)\n        ]\n    (map merge pillars extras qi)\n    ))\n\n\n(defn luck-pillars [date is-male natals]\n  (let [pillars      (bc/luck-pillars date is-male)\n        stems        (map first pillars)\n        branches     (map second pillars)\n        jiazis       (jiazis stems branches)\n        start-ages   (bc/luck-pillar-start-ages date is-male)\n        start-dates  (map #(time/plus date (time/years %)) start-ages)\n        start-years  (map #(time/year %) start-dates)\n        slugs        (map str start-ages (repeat \" - \") start-years)\n        lucks    (map hash-map\n                      (repeat :stem) stems\n                      (repeat :branch) branches\n                      (repeat :jiazi) jiazis\n                      (repeat :slug) slugs\n                      (repeat :palace) (repeat :l)\n                      (repeat :start-age) start-ages\n                      (repeat :start-date) start-dates)\n        rels     (map (partial relations2 bu/relations natals) lucks)\n        qi       (map (partial pillars-stems-qi natals) lucks)\n        extras   (map hash-map (repeat :relations) rels )]\n    (map merge lucks extras qi)\n    ))\n\n\n(defn year-pillars [date natals]\n  (let [year     (time/year date)\n        pillars  (bc/year-pillars (- year 1) (+ year 100)  )\n        stems    (map first pillars)\n        branches (map second pillars)\n        jiazis   (jiazis stems branches)\n        slugs    (range (- year 1) (+ year 100))\n        yps      (map hash-map\n                      (repeat :stem) stems\n                      (repeat :branch) branches\n                      (repeat :jiazi) jiazis\n                      (repeat :slug) slugs\n                      (repeat :palace) (repeat :y))\n        rels     (map (partial relations2 bu/relations natals) yps)\n        qi       (map (partial pillars-stems-qi natals) yps)\n        extras   (map hash-map (repeat :relations) rels )]\n    (map merge yps extras qi)\n    ))\n\n\n(defn chart [date is-male]\n  (let [natal      (natal-pillars date)\n        luck       (take 10 (luck-pillars date is-male natal))\n        year       (year-pillars date natal)\n        g-scores (god-scores natal)\n        e-scores (element-scores g-scores)\n        sw-scores (strong-weak-scores e-scores)]\n    {:natal-pillars natal\n     :luck-pillars luck\n     :year-pillars year\n     :god-scores    g-scores\n     :elem-scores   e-scores\n     :strong-weak-scores sw-scores}))\n\n\n;;(def dd (time/date-time 1990 9 6 23 10))\n;;(def nps (natal-pillars dd))\n;;(take 1 (luck-pillars dd true nps))\n\n\n;;(stem-scores nps)\n;;(god-scores nps)\n;;(strong-weak-scores (element-scores (god-scores nps)))\n\n\n"]}