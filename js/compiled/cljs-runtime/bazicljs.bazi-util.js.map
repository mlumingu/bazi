{"version":3,"sources":["bazicljs/bazi-util.cljs"],"mappingscC;AAApB,AACE,AAACF,AAAAA,AAAAA,AAAiBE,AAAAA;;AAEpB,AAAA,AAAMC,AAAeC;AAArB,AACE,AAAA,AAACC,AAAID;;AAEP,AAAA,AAAME,AAAiBJ;AAAvB,AACE,AAACC,AAAc,AAACH,AAAAA,AAAAA,AAAiBE,AAAAA;;AAEnC,AAAA,AAAMK,AAAcH;AAApB,AACE,AAAA,AAACI,AAAKJ;;AAER,AAAA,AAAMK,AAAgBP;AAAtB,AACE,AAAME,AAAK,AAACJ,AAAAA,AAAAA,AAAiBE,AAAAA;AAA7B,AACE,AAAA,AAACM,AAAKJ;;AAEV,AAAA,AAAMM,AAAUN,AAAKO;AAArB,AACE,AAAMC,AAAO,AAACL,AAAaH;AACrBS,AAAM,AAACV,AAAcC;AACrBU,AAAQ,AAACP,AAAaI;AACtBI,AAAO,AAACZ,AAAcQ;AACtBK,AAAO,AAAA,AAACX,AAAI,AAAGO,AAAO,AAAA,AAAKE;AAC3BG,AAAU,AAAA,AAACZ,AAAI,AAAGQ,AAAM,AAAA,AAAKE;AALnC,AAME,AAAA,AAAK,AAAGC,AAAOC;;AAEnB,AAAA,AAAMC,AAAYhB,AAAOS;AAAzB,AACE,AAAMP,AAAK,AAACJ,AAAAA,AAAAA,AAAiBE,AAAAA;AAA7B,AACE,AAACQ,AAASN,AAAKO","names":["bazicljs.bazi-util/STEM-NAMES","bazicljs.bazi-util/STEM-HTML","bazicljs.bazi-util/BRANCH-NAMES","bazicljs.bazi-util/BRANCH-HTML","bazicljs.bazi-util/POLARITY-NAMES","bazicljs.bazi-util/ELEMENT-NAMES","bazicljs.bazi-util/GOD-NAMES","bazicljs.bazi-util/FIVE-FACTOR-NAMES","bazicljs.bazi-util/HIDDEN-STEMS","bazicljs.bazi-util/STEM-FROM-BRANCH","bazicljs.bazi-util/hidden-stems","branch","bazicljs.bazi-util/stem-polarity","stem","cljs.core/rem","bazicljs.bazi-util/branch-polarity","bazicljs.bazi-util/stem-element","cljs.core/quot","bazicljs.bazi-util/branch-element","bazicljs.bazi-util/stem-god","daymaster","s-elem","s-pol","dm-elem","dm-pol","factor","delta-pol","bazicljs.bazi-util/branch-god"],"sourcesContent":["(ns bazicljs.bazi-util)\n\n\n(def STEM-NAMES [\"Jia\"  \"Yi\"  \"Bing\"  \"Ding\"  \"Wu\"  \"Ji\"  \"Geng\"  \"Xin\"  \"Ren\"  \"Gui\"])\n\n(def STEM-HTML [\"\\u7532\"  \"\\u4e59\"  \"\\u4e19\"  \"\\u4e01\"  \"\\u620a\"  \"\\u5df1\"  \"\\u5e9a\"  \"\\u8f9b\"  \"\\u58ec\"  \"\\u7678\"])\n\n(def BRANCH-NAMES [\"Zi\"  \"Chou\"  \"Yin\"  \"Mao\"  \"Chen\"  \"Si\"  \"Wu\"  \"Wei\"  \"Shen\"  \"You\"  \"Xu\"  \"Hai\"])\n\n(def BRANCH-HTML [\"\\u5b50\"  \"\\u4e11\" \n                  \"\\u5bc5\" \"\\u536f\"  \"\\u8fb0\" \n                  \"\\u5df3\"  \"\\u5348\"  \"\\u672a\" \n                  \"\\u7533\"  \"\\u9149\"  \"\\u620c\" \n                  \"\\u4ea5\"])\n\n(def POLARITY-NAMES [\"Yin\"  \"Yang\"])\n\n(def ELEMENT-NAMES [\"Wood\"  \"Fire\"  \"Earth\"  \"Metal\"  \"Water\"])\n\n(def GOD-NAMES [\"FR\"  \"RW\"  \"EG\"  \"HO\"  \"IW\"  \"DW\"  \"7K\"  \"DO\"  \"IR\"  \"DR\"])\n\n(def FIVE-FACTOR-NAMES [\"Friends\"  \"Output\"  \"Wealth\"  \"Influence\"  \"Resource\"])\n\n(def HIDDEN-STEMS [[9] [5 7 9] \n                   [0 4 2] [1] [4 9 1] \n                   [2 4 3] [3 5] [5 3 1] \n                   [6 4 8] [7] [4 3 7] \n                   [9 0]])\n\n(def STEM-FROM-BRANCH [8 5  0 1 4  3 2 5  6 7 4  9])\n\n(defn hidden-stems [branch]\n  (STEM-FROM-BRANCH branch))\n\n(defn stem-polarity [stem]\n  (rem stem 2))\n\n(defn branch-polarity [branch]\n  (stem-polarity (STEM-FROM-BRANCH branch)))\n\n(defn stem-element [stem]\n  (quot stem 2))\n\n(defn branch-element [branch]\n  (let [stem (STEM-FROM-BRANCH branch)]\n    (quot stem 2)))\n\n(defn stem-god [stem daymaster]\n  (let [s-elem (stem-element stem)\n        s-pol (stem-polarity stem)\n        dm-elem (stem-element daymaster)\n        dm-pol (stem-polarity daymaster)\n        factor (rem (+ s-elem (- 5 dm-elem)) 5)\n        delta-pol (rem (+ s-pol (- 2 dm-pol)) 2)]\n    (* 2 (+ factor delta-pol))))\n\n(defn branch-god [branch daymaster]\n  (let [stem (STEM-FROM-BRANCH branch)]\n    (stem-god stem daymaster)))\n\n"]}