{"version":3,"sources":["bazicljs/calendar.cljs"],"mappings":"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","names":["bazicljs.calendar/cal","cljs.core.atom","bazicljs.calendar/gregorian-to-solar-ymd","date","y","cljs-time.core/year","m","cljs-time.core/month","d","cljs-time.core/day","yy","fexpr__82694","fexpr__82696","fexpr__82697","cljs.core/deref","bazicljs.calendar/hour-branch","h","cljs.core/rem","Math/ceil","bazicljs.calendar/hour-stem","ds","hb","Math/floor","bazicljs.calendar/next-pillar","p","s","b","bazicljs.calendar/previous-pillar","bazicljs.calendar/days-to-next-prev-month-1","delta-date","delta","ms","days-diff","delta-pillars","delta-ms","cljs.core._EQ_","G__82698","G__82699","G__82700","G__82701","cljs_time.core.plus","cljs_time.core.days","bazicljs.calendar/days-to-next-prev-month","pillars","bazicljs.calendar/use-forward-direction?","is-male","yang-year","or__4126__auto__","and__4115__auto__","cljs.core/not","bazicljs.calendar/luck-pillars","natal-pillars","ys","mp","cljs.core/iterate","bazicljs.calendar/luck-pillar-start-delta","bazicljs.calendar/luck-pillar-start-ages","fexpr__82702","start-age","cljs.core.partial","cljs.core/+","bazicljs.calendar/gregorian-to-solar","solar","cljs-time.core/hour","hs","cljs.core.into","bazicljs.calendar/natal-slugs","bazicljs.calendar/solar-year","bazicljs.calendar/solar-month","bazicljs.calendar/solar-day","bazicljs.calendar/solar-hour","bazicljs.calendar/time-pillars","start","end","pillar-selector","cljs.core.range","p1__82703#","cljs.core.map","p1__82704#","cljs.core.take_while","cljs-time.core/before?","p1__82705#","cljs.core/group-by","G__82709","p1__82706#","cljs.core/PersistentVector","cljs.core/first","cljs.core/last","p1__82707#","p2__82708#","cljs.core.sort_by","bazicljs.calendar/year-pillars","bazicljs.calendar/month-pillars","bazicljs.calendar/day-pillars","bazicljs.calendar/hour-pillars","day","cljs.core/List","p1__82710#","cljs-time.core/at-midnight","cljs_time.core.hours","p1__82711#"],"sourcesContent":["(ns bazicljs.calendar\n  (:require\n   [ajax.core :refer [GET]]\n   [cljs-http.client :as http]\n   [cljs-time.core :as time]\n   [cljs-time.format :as ftime]\n   [clojure.set :refer [map-invert]]\n   ))\n\n(def cal (atom nil))\n\n\n(defn gregorian-to-solar-ymd [date]\n  (let [y (time/year date)\n        m (time/month date)\n        d (time/day date)\n\n        yy (- y 1600)]\n    (((@cal yy) m) d)))\n\n(defn hour-branch [h]\n  (rem (Math/ceil (/ h 2)) 12))\n\n(defn hour-stem [ds h]\n  (let [hb (hour-branch h)]\n    (rem (+ hb\n            (* ds 2)\n            (* (Math/floor (/ h 23))\n               2))\n         10)\n    ))\n\n(defn next-pillar [p]\n  (let [s (p 0)\n        b (p 1)]\n    [(rem (+ s 1)\n          10)\n     (rem (+ b 1)\n          12)]))\n\n(defn previous-pillar [p]\n  (let [s (p 0)\n        b (p 1)]\n    [(rem (+ (- s 1) 10)\n          10)\n     (rem (+ (- b 1) 12)\n          12)]))\n\n\n(defn days-to-next-prev-month-1 [delta-date delta ms days-diff]\n  (let [delta-pillars (gregorian-to-solar-ymd delta-date)\n        delta-ms (delta-pillars 2)]\n    (if (= ms delta-ms)\n      (days-to-next-prev-month-1 (time/plus delta-date (time/days delta))\n                                 delta\n                                 ms\n                                 (inc days-diff))\n      days-diff)))\n\n(defn days-to-next-prev-month [date delta]\n  (let [pillars (gregorian-to-solar-ymd date)\n        ms (pillars 2)]\n    (days-to-next-prev-month-1 date delta ms 0)))\n\n\n(defn use-forward-direction? [is-male yang-year]\n  (or (and is-male yang-year)\n      (and (not is-male)\n           (not yang-year))))\n\n\n(defn luck-pillars [date is-male]\n  (let [natal-pillars (gregorian-to-solar-ymd date)\n        ys (natal-pillars 4)\n        mp [(natal-pillars 2) (natal-pillars 3)]\n        yang-year (= (rem ys 2) 0)]\n    (if (use-forward-direction? is-male yang-year)\n      (iterate next-pillar (next-pillar mp))\n      (iterate previous-pillar (previous-pillar mp)))))\n\n(defn luck-pillar-start-delta [is-male yang-year]\n  (if (use-forward-direction? is-male yang-year)\n    1\n    -1))\n\n(defn luck-pillar-start-ages [date is-male]\n  (let [ys ((gregorian-to-solar-ymd date) 4)\n        yang-year (= (rem ys 2) 0)\n        delta (luck-pillar-start-delta is-male yang-year)\n        days-diff (days-to-next-prev-month date delta)\n        start-age (Math/floor (/ days-diff 3))]\n    (iterate (partial + 10) start-age)))\n\n\n(defn gregorian-to-solar [date]\n  (let [solar (gregorian-to-solar-ymd date)\n        ds (solar 0)\n        h (time/hour date)\n        hb (hour-branch h)\n        hs (hour-stem ds h)]\n    (into [hs hb] solar)))\n\n\n(defn natal-slugs [date]\n  (let [y (time/year date)\n        m (time/month date)\n        d (time/day date)\n        h (time/hour date)]\n    [h d m y]))\n\n\n(defn solar-year [pillars]\n  [(pillars 4) (pillars 5)])\n\n\n(defn solar-month [pillars]\n  [(pillars 2) (pillars 3)])\n\n\n(defn solar-day [pillars]\n  [(pillars 0) (pillars 1)])\n\n\n(defn solar-hour [pillars]\n  [(pillars 0) (pillars 1)])\n\n\n(defn time-pillars [start end pillar-selector]\n  (->> (range)\n       (map #(time/plus start (time/days %)))\n       (take-while #(time/before? % end))\n       (group-by #(pillar-selector (gregorian-to-solar-ymd %)))\n       (map #(vector (first (% 1)) (time/plus (last (% 1)) (time/days 1)) (% 0)))\n       (sort-by first #(time/before? %1 %2))\n       ))\n\n\n(defn year-pillars [start end]\n  (time-pillars start end solar-year))\n\n\n(defn month-pillars [start end]\n  (time-pillars start end solar-month))\n\n\n(defn day-pillars [start end]\n  (time-pillars start end solar-day))\n\n\n(defn hour-pillars [day]\n  (->> (list 0 1 3 5 7 9 11 13 15 17 19 21 23)\n       (map #(time/plus (time/at-midnight day) (time/hours %)))\n       (map #(vector % (solar-hour (gregorian-to-solar %))))\n       ))\n\n;;(def d0 (time/date-time 1990 9 6 23 10))\n;;(def d1 (time/date-time 1990 9 8 0 0))\n;;(day-pillars d0 d1)\n\n;;(ftime/unparse (ftime/formatter \"yyyy-MM-dd HH:mm\") d0)\n\n\n\n"]}