{"version":3,"sources":["bazicljs/bazi_util.cljs"],"mappings":";AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AACL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAGL,AAAA,AAAMC,AAAKC,AAAKC,AAAIC,AAAOC;AAA3B,AAAA,AAAA,AAAA,AAAA,AAAA,AACSH,AAAUC,AAAYC,AAAeC;;AAE9C,AAAA,AAAKC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACL,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,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","names":["bazicljs.bazi-util/pillar-types","bazicljs.bazi-util/palace-keys","bazicljs.bazi-util/STEM-NAMES","bazicljs.bazi-util/STEM-HTML","bazicljs.bazi-util/BRANCH-NAMES","bazicljs.bazi-util/BRANCH-HTML","bazicljs.bazi-util/POLARITY-NAMES","bazicljs.bazi-util/ELEMENT-NAMES","bazicljs.bazi-util/GOD-NAMES","bazicljs.bazi-util/FACTOR-NAMES","bazicljs.bazi-util/HIDDEN-STEMS","bazicljs.bazi-util/STEM-FROM-BRANCH","bazicljs.bazi-util/rel","type","ids","idtype","pairs?","bazicljs.bazi-util/relations","bazicljs.bazi-util/natal-relations","cljs.core.concat","bazicljs.bazi-util/hidden-stems","branch","bazicljs.bazi-util/stem-polarity","stem","cljs.core/rem","bazicljs.bazi-util/branch-polarity","bazicljs.bazi-util/stem-element","cljs.core/quot","bazicljs.bazi-util/branch-element","bazicljs.bazi-util/stem-god","daymaster","s-elem","s-pol","dm-elem","dm-pol","factor","delta-pol","bazicljs.bazi-util/stem-gods","dm","p1__30279#","cljs.core.map","cljs.core.range","bazicljs.bazi-util/branch-god","bazicljs.bazi-util/stem-qi","stem-phases","s-phase","op","cljs.core._EQ_","cljs.core/+","cljs.core/-","bazicljs.bazi-util/score-multiplier","bid","sid","earth-multiplier","multiplier","G__30281","bazicljs.bazi-util/score-multipliers","p1__30282#","bazicljs.bazi-util/dm-score-correction-multipliers","bazicljs.bazi-util/jiazi-qi-stages","bazicljs.bazi-util/jiazi-qi","pillar","fexpr__30285"],"sourcesContent":["(ns bazicljs.bazi-util)\n\n(def pillar-types [\"H\" \"D\" \"M\" \"Y\" \"l\" \"y\" \"m\" \"d\" \"h\"])\n(def palace-keys [:H :D :M :Y :l :y :m :d :h])\n\n(def STEM-NAMES [\"Jia\"  \"Yi\"  \"Bing\"  \"Ding\"  \"Wu\"  \"Ji\"  \"Geng\"  \"Xin\"  \"Ren\"  \"Gui\"])\n\n(def STEM-HTML [\"\\u7532\"  \"\\u4e59\"  \"\\u4e19\"  \"\\u4e01\"  \"\\u620a\"  \"\\u5df1\"  \"\\u5e9a\"  \"\\u8f9b\"  \"\\u58ec\"  \"\\u7678\"])\n\n(def BRANCH-NAMES [\"Zi\"  \"Chou\"  \"Yin\"  \"Mao\"  \"Chen\"  \"Si\"  \"Wu\"  \"Wei\"  \"Shen\"  \"You\"  \"Xu\"  \"Hai\"])\n\n(def BRANCH-HTML [\"\\u5b50\"  \"\\u4e11\" \n                  \"\\u5bc5\" \"\\u536f\"  \"\\u8fb0\" \n                  \"\\u5df3\"  \"\\u5348\"  \"\\u672a\" \n                  \"\\u7533\"  \"\\u9149\"  \"\\u620c\" \n                  \"\\u4ea5\"])\n\n(def POLARITY-NAMES [\"Yin\"  \"Yang\"])\n\n(def ELEMENT-NAMES [\"Wood\"  \"Fire\"  \"Earth\"  \"Metal\"  \"Water\"])\n\n(def GOD-NAMES [\"FR\"  \"RW\"  \"EG\"  \"HO\"  \"IW\"  \"DW\"  \"7K\"  \"DO\"  \"IR\"  \"DR\"])\n\n(def FACTOR-NAMES [\"Parallel\"  \"Output\"  \"Wealth\"  \"Influence\"  \"Resource\"])\n\n(def HIDDEN-STEMS [[9] [5 7 9] \n                   [0 4 2] [1] [4 9 1] \n                   [2 4 6] [3 5] [5 3 1] \n                   [6 4 8] [7] [4 3 7] \n                   [8 0]])\n\n(def STEM-FROM-BRANCH [8 5  0 1 4  3 2 5  6 7 4  9])\n\n\n(defn rel [type ids idtype pairs?]\n  {:type type :ids ids :idtype idtype :pairs? pairs?})\n\n(def relations [(rel :clash #{0 6} :branch true)\n                (rel :clash #{1 7} :branch true)\n                (rel :clash #{2 8} :branch true)\n                (rel :clash #{3 9} :branch true)\n                (rel :clash #{4 10} :branch true)\n                (rel :clash #{5 11} :branch true)\n\n                (rel :harm #{2 5}  :branch true)\n                (rel :harm #{8 11} :branch true)\n                (rel :harm #{3 4}  :branch true)\n                (rel :harm #{9 10} :branch true)\n                (rel :harm #{6 1}  :branch true)\n                (rel :harm #{0 7}  :branch true)                \n\n                (rel :destruction #{2 5}  :branch true)\n                (rel :destruction #{4 11}  :branch true)\n                (rel :destruction #{6 1}  :branch true)\n                (rel :destruction #{8 3}  :branch true)\n                (rel :destruction #{10 7}  :branch true)\n                (rel :destruction #{0 9}  :branch true)\n\n                (rel :ug-pun [2 8] :branch true)\n                (rel :ug-pun [2 5] :branch true)\n                (rel :ug-pun [8 5] :branch true)\n\n                (rel :bu-pun [7 1] :branch true)\n                (rel :bu-pun [1 10] :branch true)\n                (rel :bu-pun [10 7] :branch true)\n                \n                (rel :uc-pun [0 3] :branch true)\n\n                (rel :s-pun [4 4] :branch true)\n                (rel :s-pun [6 6] :branch true)\n                (rel :s-pun [9 9] :branch true)\n                (rel :s-pun [11 11] :branch true)\n                \n                (rel :s-combo #{0 5} :stem true)\n                (rel :s-combo #{1 6} :stem true)\n                (rel :s-combo #{2 7} :stem true)\n                (rel :s-combo #{3 8} :stem true)\n                (rel :s-combo #{4 9} :stem true)\n\n                (rel :b-combo #{0 1} :branch true)\n                (rel :b-combo #{2 11} :branch true)\n                (rel :b-combo #{3 10} :branch true)\n                (rel :b-combo #{4 9} :branch true)\n                (rel :b-combo #{5 8} :branch true)\n                (rel :b-combo #{7 6} :branch true)                \n                \n                (rel :harmony #{2 6 10} :branch false)\n                (rel :harmony #{8 0 4} :branch false)\n                (rel :harmony #{11 3 7} :branch false)\n                (rel :harmony #{5 9 1} :branch false)\n\n                (rel :season-combo #{2 3 4} :branch false)\n                (rel :season-combo #{5 6 7} :branch false)\n                (rel :season-combo #{8 9 10} :branch false)\n                (rel :season-combo #{11 0 1} :branch false)                       \n                ])\n\n\n(def natal-relations (concat relations \n                             [(rel :ls-cross #{0 6 9 3} :branch false)\n                              (rel :al-cross #{1 7 10 4} :branch false)\n                              (rel :t-cross #{2 5 8 11} :branch false)]))\n\n\n(defn hidden-stems [branch]\n  (STEM-FROM-BRANCH branch))\n\n(defn stem-polarity [stem]\n  (rem stem 2))\n\n(defn branch-polarity [branch]\n  (stem-polarity (STEM-FROM-BRANCH branch)))\n\n(defn stem-element [stem]\n  (quot stem 2))\n\n(defn branch-element [branch]\n  (let [stem (STEM-FROM-BRANCH branch)]\n    (quot stem 2)))\n\n\n(defn stem-god [daymaster stem]\n  (let [s-elem    (stem-element stem)\n        s-pol     (stem-polarity stem)\n        dm-elem   (stem-element daymaster)\n        dm-pol    (stem-polarity daymaster)\n        factor    (rem (+ s-elem (- 5 dm-elem)) 5)\n        delta-pol (rem (+ s-pol (- 2 dm-pol)) 2)]\n    (+ (* 2 factor) delta-pol)))\n\n(defn stem-gods [dm]\n  (map #(stem-god dm %) (range 10)))\n\n\n(defn branch-god [branch daymaster]\n  (let [stem (STEM-FROM-BRANCH branch)]\n    (stem-god stem daymaster)))\n\n\n(defn stem-qi [branch stem]\n  (let [stem-phases [1 6 10 9 10 9 7 0 4 3]\n        s-phase     (stem-phases stem)\n        s-pol       (stem-polarity stem)\n        op          (if (= s-pol 0) + -)]\n    (+ 1 (rem (+ (op s-phase branch) 12) 12))))\n\n\n(defn score-multiplier [bid sid]\n  (let [earth-multiplier [0.5 1  0.5 0.5 1  1 1 1  0.5 0.5 1  0.5]\n        multiplier       [nil  0.8 0.5 0.5 1 1 0.8 0.5 0.5 0.8 0.5 0.5 0.5]\n        s-elem           (stem-element sid)]\n    ;;2 == earth\n    (if (= s-elem 2)\n      (earth-multiplier bid)\n      (multiplier (stem-qi bid sid)))\n    ))\n\n\n(defn score-multipliers [bid]\n  (map #(score-multiplier bid %) (range 10)))\n\n\n(def dm-score-correction-multipliers [1 1 0.7 0.7 0.7 0.7 0.7 0.7 1 1])\n\n\n(def jiazi-qi-stages\n  {\n\n   ;;jia\n   [0 0]   [2   3   4   5   6   7   8   9   10   11   12   1]\n   [0 10]  [2   3   4   5   6   7   8   9   10   11   12   1]\n   [0 8]   [2   3   4   5   6   7   8   9   10   11   12   1]\n   [0 6]   [2   3   4   5   6   7   8   9   10   11   12   1]\n   [0 4]   [2   3   4   5   6   7   8   9   10   11   12   1]\n   [0 2]   [1   3   4   5   6   7   8   9   10   11   12   5]\n\n   ;;yi\n   [1 1]   [7   6   5   4   3   2   1   12   11   10   9   8]\n   [1 11]  [7   6   5   4   3   2   1   12   11   10   9   8]\n   [1 9]   [7   6   5   4   3   2   1   12   11   10   9   8]\n   [1 7]   [7   6   5   4   3   2   1   12   11   10   9   8]\n   [1 5]   [7   6   5   4   3   2   1   12   11   10   9   1]\n   [1 3]   [5   6   5   4   3   2   1   12   11   10   9   1]\n\n   ;;bing\n   [2 2]  [11   12   1   2   3   4   5   6   7   8   9   10]\n   [2 0]  [11   12   1   2   3   4   5   6   7   8   9   10]\n   [2 10] [11   12   1   2   3   4   5   6   7   8   9   10]\n   [2 8]  [11   12   1   2   3   4   5   6   7   8   9   10]\n   [2 6]  [11   12   1   2   3   4   5   6   7   8   9   8]\n   [2 4]  [4    12   1   2   3   4   5   6   7   8   9   8]\n\n   ;;ding\n   [3 3]  [10   9   8   7   6   5   4   3   2   1   12   11]\n   [3 1]  [10   9   8   7   6   5   4   3   2   1   12   11]\n   [3 11] [10   9   8   7   6   5   4   3   2   1   12   11]\n   [3 9]  [10   9   8   7   6   5   4   3   2   1   12   11]\n   [3 7]  [2    9   8   7   6   5   4   3   2   1   12   10]\n   [3 5]  [2    9   8   7   6   5   4   3   2   1   12   10]\n\n   ;;wu\n   [4 4]   [11   12   1   2   3   4   5   6   7   8   9   10]\n   [4 2]   [11   12   1   2   3   4   5   6   7   8   9   10]\n   [4 0]   [11   12   1   2   3   4   5   6   7   8   9   10]\n   [4 10]  [11   12   1   2   3   4   5   6   7   8   9   10]\n   [4 8]   [7    12   1   2   3   4   5   6   7   8   9   11]\n   [4 6]   [7    12   1   2   3   4   5   6   7   8   9   11]\n\n   ;;ji\n   [5 5]   [10   9   8   7   6   5   4   3   2   1   12   11]\n   [5 3]   [10   9   8   7   6   5   4   3   2   1   12   11]\n   [5 1]   [10   9   8   7   6   5   4   3   2   1   12   11]\n   [5 11]  [10   9   8   7   6   5   4   3   2   1   12   11]\n   [5 9]   [11   9   8   7   6   5   4   3   2   1   12   10]\n   [5 7]   [11   9   8   7   6   5   4   3   2   1   12   10]\n\n   ;;geng\n   [6 6]   [8   9   10   11   12   1   2   3   4   5   6   7]\n   [6 4]   [8   9   10   11   12   1   2   3   4   5   6   7]\n   [6 2]   [8   9   10   11   12   1   2   3   4   5   6   7]\n   [6 0]   [8   9   10   11   12   1   2   3   4   5   6   7]\n   [6 10]  [10  9   10   11   12   1   2   3   4   5   6   11]\n   [6 8]   [10  9   10   11   12   1   2   3   4   5   6   11]\n\n   ;;xin\n   [7 7]  [1   12   11   10   9   8   7   6   5   4   3   2]\n   [7 5]  [1   12   11   10   9   8   7   6   5   4   3   2]\n   [7 3]  [1   12   11   10   9   8   7   6   5   4   3   2]\n   [7 1]  [1   12   11   10   9   8   7   6   5   4   3   2]\n   [7 11] [11  12   11   10   9   8   7   6   5   4   3   7]\n   [7 9]  [11  12   11   10   9   8   7   6   5   4   3   7]\n\n   ;;ren\n   [8 8]   [5   6   7   8   9   10   11   12   1   2   3   4]\n   [8 6]   [5   6   7   8   9   10   11   12   1   2   3   4]\n   [8 4]   [5   6   7   8   9   10   11   12   1   2   3   4]\n   [8 2]   [5   6   7   8   9   10   11   12   1   2   3   4]\n   [8 0]   [10  6   7   8   9   10   11   12   1   2   3   2]\n   [8 10]  [10  6   7   8   9   10   11   12   1   2   3   2]\n\n   ;;gui\n   [9 9]  [4   3   2   1   12   11   10   9   8   7   6   5]\n   [9 7]  [4   3   2   1   12   11   10   9   8   7   6   5]\n   [9 5]  [4   3   2   1   12   11   10   9   8   7   6   5]\n   [9 3]  [4   3   2   1   12   11   10   9   8   7   6   5]\n   [9 1]  [8   3   2   1   12   11   10   9   8   7   6   4]\n   [9 11] [8   3   2   1   12   11   10   9   8   7   6   4]\n\n   }\n  )\n\n(defn jiazi-qi [branch pillar]\n  ((jiazi-qi-stages pillar) branch)\n  )\n\n"]}